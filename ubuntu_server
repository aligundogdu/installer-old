#!/usr/bin/env bash
#
# Ubuntu Desktop
#
# Author:  Onur Özgür ÖZKAN <onur.ozgur.ozkan@lab2023.com>
# Licence: MIT
#

shopt -s nocaseglob
set -e


# Variables
script_runner=$(whoami)


# Exit
control_c()
{
  echo -en "\n\n*** Exiting ***\n\n"
  exit 1
}


# trap keyboard interrupt (control-c)
trap control_c SIGINT


clear


# check distro is linux and ubuntu
if [[ $MACHTYPE = *linux* ]] ; then
  distro_sig=$(cat /etc/issue)
  if [[ "$distro_sig" =~ ubuntu ]] ; then
    distro="ubuntu"
  else
    echo -e "This script install only supports Ubuntu\n"
    exit 1
  fi
else
  echo -e "This script only supports Ubuntu\n"
  exit 1
fi


# check if user is root
if [ $script_runner == "root" ] ; then
  echo -e "\nThis script must be run as a normal user with sudo privileges\n"
  exit 1
fi


# Check if the user has sudo privileges.
sudo -v >/dev/null 2>&1 || { echo $script_runner has no sudo privileges ; exit 1; }


## Update system
echo -e "\n=> updating system and install basic packages"
sudo apt-get update
sudo apt-get -y install python-software-properties
echo "==> done..."


## Install build tools
echo -e "\n=> Installing build tools..."
sudo apt-get -y install curl build-essential clang bison openssl zlib1g libxslt1.1 libssl-dev libxslt1-dev libxml2 libffi-dev libyaml-dev libxslt-dev autoconf libc6-dev libreadline6-dev zlib1g zlib1g-dev libcurl4-openssl-dev git-core automake libreadline6-dev libxml2-dev libxslt-dev ncurses-dev libtool subversion
echo "==> done..."


# Install imagemagick
echo -n "Would you like to install ImageMagick? (y/n): "
read installImage
if [[ "$installImage" == "y" ]] || [[ "$installImage" == "yes" ]]; then
  if [[ ! -f $(which convert) ]]; then
    echo -e "\nInstalling ImageMagick (this may take a while)"
    sudo apt-get -y install imagemagick libmagick9-dev > /dev/null 2>&1
    echo "==> done"
  else
    echo -e "\n==> ImageMagick is already installed"
  fi
fi


# Install node.js
echo -n "Would you like to install nodejs? (y/n): "
read installNodejs
if [[ "$installNodejs" == "y" ]] || [[ "$installNodejs" == "yes" ]]; then
  if [[ ! -f $(which nodejs) ]]; then
    echo -e "\n=> Installing nodejs..."
    sudo add-apt-repository ppa:chris-lea/node.js
    sudo apt-get -y update
    sudo apt-get -y install nodejs
    echo "==> done..."  
  else
    echo "==> Nodejs is already installed"  
  fi
fi


## Install sqlite
echo -n "Would you like to install sqlite? (y/n): "
read installSqlite
if [[ "$installSqlite" == "y" ]] || [[ "$installSqlite" == "yes" ]]; then
  if [[ ! -f $(which sqlite3) ]]; then
    echo -e "\n=> Installing sqlite3..."
    sudo apt-get -y install libsqlite3-0 libsqlite3-dev sqlite3
    echo "==> done..."  
  else
    echo "==> Nginx is already installed"  
  fi
fi


## Install MySQL
# sudo mysql -u root -p
# create database blog_production;
# grant all on blog_production.* to blog@localhost identified by 'secret';
# exit
echo -n "Would you like to install mysql? (y/n): "
read installMysql
if [[ "$installMysql" == "y" ]] || [[ "$installMysql" == "yes" ]]; then
  if [[ ! -f $(which mysql) ]]; then
    echo -e "\n=> Installing mysql..."
    sudo apt-get -y install mysql-server mysql-client libmysqlclient-dev
    echo "==> done..."  
  else
    echo "==> Mysql is already installed"  
  fi
fi


## Installing PostgreSQL
# sudo -u postgres psql
# \password
# create user blog with password 'secret';
# create database blog_production owner blog;
# \q
echo -n "Would you like to install postgresql? (y/n): "
read installPostgresql
if [[ "$installPostgresql" == "y" ]] || [[ "$installPostgresql" == "yes" ]]; then
  if [[ ! -f $(which clusterdb) ]]; then
    echo -e "\n=> Installing postgresql..."
    sudo add-apt-repository ppa:pitti/postgresql
    sudo apt-get -y update
    sudo apt-get -y install postgresql libpq-dev
    echo "==> done..."
  else
    echo "==> Mysql is already installed"  
  fi
fi


# Install nginx
echo -n "Would you like to install nginx? (y/n)"
read installNginx
if [[ "$installNginx" == "y" ]] || [[ "$installNginx" == "yes" ]]; then
  if [[ ! -f $(which nginx) ]]; then
    echo -e "\n=> install nginx..."
    sudo add-apt-repository ppa:nginx/stable
    sudo apt-get -y update
    sudo apt-get -y install nginx
    sudo service nginx start
    echo "==> done..."
  else  
    echo "==> Nginx is already installed"
  fi
fi

# Install rvm & ruby
echo -n "Would you like to install ruby with rvm? (y/n)"
read installRvmRuby
if [[ "$installRvmRuby" == "y" ]] || [[ "$installRvmRuby" == "yes" ]]; then
  if [[ ! -f $(which rvm) ]] && [[ ! -f $(which ruby) ]]; then
    echo -e "\n=> install rvm & ruby..."
    wget --no-check-certificate -a  -O "$path/src/rvm-installer" https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer
    chmod +x rvm-installer
    ./rvm-installer 
    echo "Setting up RVM with shells"
    shellInject="[[ -s \"$HOME/.rvm/scripts/rvm\" ]] && . \"$HOME/.rvm/scripts/rvm\"  # Load RVM into a shell session *as a function*"
    
    echo -e "Reloading shell to use RVM\n"
    if [[ -f "$HOME/.bashrc" ]]; then
      # Add function to bash
      echo "$shellInject" >> "$HOME/.bash_profile"
      echo "$shellInject" >> "$HOME/.bashrc"
      source "$HOME/.bash_profile"
      source "$HOME/.bashrc"
    fi
    
    if [[ -f "$HOME/.zshrc" ]]; then
      # Add function to zsh
      echo "$shellInject" >> "$HOME/.zshrc"
      source "$HOME/.zshrc"
    fi
    
    [[ -f ~/.rvm/scripts/rvm ]] && source ~/.rvm/scripts/rvm
    echo "Installing MRI 1.9.3-p194(This may take a while)"
    rvm install 1.9.3-p194 
    rvm --default use 1.9.3-p194 
    
    echo -e "\nUpdating RubyGems"
    gem update --system --no-ri --no-rdoc
    gem install bundler thin rails --no-ri --no-rdoc 
    
    echo "==> Rvm, Ruby and Gems have been installed"
    echo "==> done..."
  else  
    echo "==> Rvm is already installed"
  fi
fi
